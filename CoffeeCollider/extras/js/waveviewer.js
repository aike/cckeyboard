// Generated by CoffeeScript 1.6.3
(function() {
  var WaveViewer;

  window.WaveViewer = WaveViewer = (function() {
    function WaveViewer(cc, canvas, opts) {
      var _ref, _ref1, _ref2, _ref3, _ref4;
      this.cc = cc;
      this.canvas = canvas;
      if (opts == null) {
        opts = {};
      }
      this.canvas.width = (_ref = opts.width) != null ? _ref : 1024;
      this.canvas.height = (_ref1 = opts.height) != null ? _ref1 : 120;
      this.context = this.canvas.getContext('2d');
      this.context.fillStyle = (_ref2 = opts.fillStyle) != null ? _ref2 : 'white';
      this.context.strokeStyle = (_ref3 = opts.strokeStyle) != null ? _ref3 : 'gray';
      this.context.lineWidth = (_ref4 = opts.lineWidth) != null ? _ref4 : 2;
      this.context.lineJoin = 'round';
      this.t = 0;
      this.isPlaying = false;
    }

    WaveViewer.prototype.start = function() {
      var _this = this;
      this.isPlaying = true;
      return requestAnimationFrame(function(t) {
        return _this.animate(t);
      });
    };

    WaveViewer.prototype.stop = function() {
      return this.isPlaying = false;
    };

    WaveViewer.prototype.animate = function(t) {
      var context, dx, i, imax, len, strm, strmL, strmR, _i,
        _this = this;
      if (this.isPlaying) {
        if (t - this.t > 60) {
          context = this.context;
          strm = this.cc.getStream();
          strmL = strm.getChannelData(0);
          strmR = strm.getChannelData(1);
          len = strm.length * 0.5;
          imax = 256;
          dx = this.canvas.width / imax;
          context.fillRect(0, 0, this.canvas.width, this.canvas.height);
          context.beginPath();
          context.moveTo(0, this._calcY((strmL[0] + strmR[0]) * 0.5));
          for (i = _i = 1; 1 <= imax ? _i < imax : _i > imax; i = 1 <= imax ? ++_i : --_i) {
            context.lineTo(i * dx, this._calcY((strmL[i] + strmR[i]) * 0.5));
          }
          context.lineTo(this.width, this._calcY((strmL[imax - 1] + strmR[imax - 1]) * 0.5));
          context.stroke();
          this.t = t;
        }
        return requestAnimationFrame(function(t) {
          return _this.animate(t);
        });
      } else {
        return this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);
      }
    };

    WaveViewer.prototype._calcY = function(val) {
      return -val * 0.45 * this.canvas.height + (this.canvas.height * 0.5);
    };

    return WaveViewer;

  })();

}).call(this);
